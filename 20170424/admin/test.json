{
    "data": [
        {
            "b_date": "2017-10-26 19:44:47", 
            "b_comments": 0, 
            "b_id": 483, 
            "b_intro": "<img src=\"http://www.qttc.net/static/upload/2017/15090176507340.png\" />
<div>
<p>如果你的Web应用程序有导出功能，</p>
<p>并且数据已经在浏览器端，</p>
<p>那么可以试一下这个插件 </p>
</div>", 
            "b_url": "http://www.qttc.net/201710483.html", 
            "b_tj": "1", 
            "b_title": "推荐一个浏览器端打ZIP包的一个JavaScript插件"
        }, 
        {
            "b_date": "2016-12-12 10:57:16", 
            "b_comments": 1, 
            "b_id": 474, 
            "b_intro": "<img src=\"/static/upload/2016/14815109125640.png\" />
<div>
<p>在多人参与项目中，CI是非常有助于快速发现错的</p>
<p>文中使用Gitlab做例子，从安装到配置一步步引导</p>
<p>CI软件有很多，国内大部分都用Jenkins，但目的基本一样</p>
</div>", 
            "b_url": "http://www.qttc.net/201612474.html", 
            "b_tj": "1", 
            "b_title": "Gitlab搭配Gitlab-CI配置"
        }, 
        {
            "b_date": "2015-08-18 20:40:36", 
            "b_comments": 3, 
            "b_id": 467, 
            "b_intro": "<img src=\"http://www.qttc.net/static/upload/2015/14399005367542.png\" />

<div>
首先，目前几乎大多数网页上的Progress bar都是假的，在Browser与Server-side交互过程中，HTTP是没有办法预测此次请求需要返回的数据有多大，既然没有办法知道数据有多大自然就不可能绘制Progress bar，它跟Upload还不一样，Upload时已经知道文件的大小，它只要拿到Server-side返回的已上传大小数据就能绘制出Progress bar。
</div>", 
            "b_url": "http://www.qttc.net/201508467.html", 
            "b_tj": "1", 
            "b_title": "网页实现Progress bar效果"
        }, 
        {
            "b_date": "2015-06-13 16:19:28", 
            "b_comments": 6, 
            "b_id": 464, 
            "b_intro": "<div>前后端开发分离部署模式相当于手机App与Server端类似，解决好跨域问题，会话机制后，静态资源存放的问题后，Web开发也可以像手机App一样当作一个App来开发，可以一个多个Api Server服务一个Web App， 也可以一个Api Server服务多个Web App。</div>", 
            "b_url": "http://www.qttc.net/201506464.html", 
            "b_tj": "1", 
            "b_title": "前后端分离开发部署模式"
        }, 
        {
            "b_date": "2014-10-10 23:29:32", 
            "b_comments": 5, 
            "b_id": 449, 
            "b_intro": "<img src=\"http://www.qttc.net/static/upload/2014/14129549352498.png\" />
<p>
接触的大部分项目中，验证码一直都是后台干的事，这两天正好有一个页面需要验证码，第时间想着后台实现，但突然转念一想大部分项目貌似对安全性要求不是很高，又要求有点阻止机器人的技巧，于是就用前端写了一个验证码。并利用CSS3的transform属性里的rotate设置旋转，再随机弄点干扰线，最后为了在所有DOM节点的上边加一层opacity=0的DIV，一个前端验证码就出来了。
</p>", 
            "b_url": "http://www.qttc.net/201410449.html", 
            "b_tj": "1", 
            "b_title": "JavaScript + CSS3写了一个前端验证码插件"
        }
    ], 
    "error": 0
}